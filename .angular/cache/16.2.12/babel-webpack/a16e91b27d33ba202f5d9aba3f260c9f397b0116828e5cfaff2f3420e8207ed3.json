{"ast":null,"code":"import { environment } from 'src/environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CocktailService {\n  constructor(http) {\n    this.http = http;\n  }\n  getCocktails() {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/cocktails`);\n  }\n  createDrink(name, ingredients, instructions, imageURL) {\n    const {\n      apiUrl\n    } = environment;\n    const payload = {\n      name,\n      ingredients,\n      instructions,\n      imageURL\n    };\n    return this.http.post(`${apiUrl}/cocktails`, payload);\n  }\n  getCocktail(id) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/cocktails/${id}`);\n  }\n  editCocktail(id, name, ingredients, instructions, imageURL) {\n    const {\n      apiUrl\n    } = environment;\n    const payload = {\n      id,\n      name,\n      ingredients,\n      instructions,\n      imageURL\n    };\n    return this.http.put(`${apiUrl}/cocktails/${id}`, payload);\n  }\n  updateCocktail(id) {\n    const {\n      apiUrl\n    } = environment;\n    // Replace this with your actual backend API call to update cocktail\n    return this.http.put(`${apiUrl}/cocktails/${id}/like`, id);\n  }\n  deleteCocktail(id) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.delete(`${apiUrl}/cocktails/${id}`);\n  }\n  onSearchByName(query) {\n    const {\n      apiUrl\n    } = environment;\n    return this.http.get(`${apiUrl}/cocktails/${query}`);\n    // Handle the search by name logic here\n    // console.log('Search by name query:', query);\n  }\n  static #_ = this.ɵfac = function CocktailService_Factory(t) {\n    return new (t || CocktailService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CocktailService,\n    factory: CocktailService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["environment","CocktailService","constructor","http","getCocktails","apiUrl","get","createDrink","name","ingredients","instructions","imageURL","payload","post","getCocktail","id","editCocktail","put","updateCocktail","deleteCocktail","delete","onSearchByName","query","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/Users/lilly/Documents/GitHub/Find-your-drink-app/src/app/cocktail-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Cocktail } from './types/cocktailsType';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { environment } from 'src/environments/environment.development';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CocktailService{\n  constructor(private http: HttpClient) {}\n\n  getCocktails(): Observable<Cocktail[]> {\n    const { apiUrl } = environment;\n    \n      return this.http.get<Cocktail[]>(`${apiUrl}/cocktails`);\n  }\n\n  \n  createDrink(\n  name: string, \n  ingredients: string, \n  instructions: string, \n  imageURL: string\n    ) {\n      const { apiUrl } = environment;\n      const payload = {name, ingredients, instructions, imageURL};\n\n      return this.http.post<Cocktail>(`${apiUrl}/cocktails`, payload);\n    }\n\n    getCocktail(id: string): Observable<Cocktail> {\n      const { apiUrl } = environment;      \n      return this.http.get<Cocktail>(`${apiUrl}/cocktails/${id}`);\n    }\n\n    editCocktail(\n      id: string, \n      name: string, \n      ingredients: string, \n      instructions: string, \n      imageURL: string) {\n        \n      const { apiUrl } = environment;\n      const payload = {id, name, ingredients, instructions, imageURL};      \n\n      return this.http.put<Cocktail>(`${apiUrl}/cocktails/${id}`, payload);\n    }\n    updateCocktail(id: string) {\n      const { apiUrl } = environment;\n      // Replace this with your actual backend API call to update cocktail\n      return this.http.put<Cocktail>(`${apiUrl}/cocktails/${id}/like`, id);\n    }\n\n    deleteCocktail(id: string) {\n      const { apiUrl } = environment;      \n      return this.http.delete<Cocktail>(`${apiUrl}/cocktails/${id}`);\n    }\n    onSearchByName(query: string): void {\n      const { apiUrl } = environment;\n      return this.http.get<Cocktail>(`${apiUrl}/cocktails/${query}`)\n      // Handle the search by name logic here\n      // console.log('Search by name query:', query);\n    }\n}\n"],"mappings":"AAIA,SAASA,WAAW,QAAQ,0CAA0C;;;AAMtE,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCC,YAAYA,CAAA;IACV,MAAM;MAAEC;IAAM,CAAE,GAAGL,WAAW;IAE5B,OAAO,IAAI,CAACG,IAAI,CAACG,GAAG,CAAa,GAAGD,MAAM,YAAY,CAAC;EAC3D;EAGAE,WAAWA,CACXC,IAAY,EACZC,WAAmB,EACnBC,YAAoB,EACpBC,QAAgB;IAEZ,MAAM;MAAEN;IAAM,CAAE,GAAGL,WAAW;IAC9B,MAAMY,OAAO,GAAG;MAACJ,IAAI;MAAEC,WAAW;MAAEC,YAAY;MAAEC;IAAQ,CAAC;IAE3D,OAAO,IAAI,CAACR,IAAI,CAACU,IAAI,CAAW,GAAGR,MAAM,YAAY,EAAEO,OAAO,CAAC;EACjE;EAEAE,WAAWA,CAACC,EAAU;IACpB,MAAM;MAAEV;IAAM,CAAE,GAAGL,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACG,GAAG,CAAW,GAAGD,MAAM,cAAcU,EAAE,EAAE,CAAC;EAC7D;EAEAC,YAAYA,CACVD,EAAU,EACVP,IAAY,EACZC,WAAmB,EACnBC,YAAoB,EACpBC,QAAgB;IAEhB,MAAM;MAAEN;IAAM,CAAE,GAAGL,WAAW;IAC9B,MAAMY,OAAO,GAAG;MAACG,EAAE;MAAEP,IAAI;MAAEC,WAAW;MAAEC,YAAY;MAAEC;IAAQ,CAAC;IAE/D,OAAO,IAAI,CAACR,IAAI,CAACc,GAAG,CAAW,GAAGZ,MAAM,cAAcU,EAAE,EAAE,EAAEH,OAAO,CAAC;EACtE;EACAM,cAAcA,CAACH,EAAU;IACvB,MAAM;MAAEV;IAAM,CAAE,GAAGL,WAAW;IAC9B;IACA,OAAO,IAAI,CAACG,IAAI,CAACc,GAAG,CAAW,GAAGZ,MAAM,cAAcU,EAAE,OAAO,EAAEA,EAAE,CAAC;EACtE;EAEAI,cAAcA,CAACJ,EAAU;IACvB,MAAM;MAAEV;IAAM,CAAE,GAAGL,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACiB,MAAM,CAAW,GAAGf,MAAM,cAAcU,EAAE,EAAE,CAAC;EAChE;EACAM,cAAcA,CAACC,KAAa;IAC1B,MAAM;MAAEjB;IAAM,CAAE,GAAGL,WAAW;IAC9B,OAAO,IAAI,CAACG,IAAI,CAACG,GAAG,CAAW,GAAGD,MAAM,cAAciB,KAAK,EAAE,CAAC;IAC9D;IACA;EACF;EAAC,QAAAC,CAAA,G;qBAtDQtB,eAAe,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf3B,eAAe;IAAA4B,OAAA,EAAf5B,eAAe,CAAA6B,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}